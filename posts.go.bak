package main

import (
	"database/sql"
	"log"
	"time"

	_ "github.com/lib/pq"
)

var (
	db *sql.DB
)

type Post struct {
	ID          int
	Title       string
	CreatedAt   time.Time
	Author      string `sql:"not null"`
	Description string
	Content     string
	ImageURL    string
	Comments    []Comment
}

// Comment is a reply to a post from a reader.
type Comment struct {
	ID        int
	Post      *Post
	Content   string
	Author    string `sql:"not null"`
	CreatedAt time.Time
	// []Comment
}

// init initiates the database connection using '-ssl-mode disable' by default, along with
// the username and password provided by flags '-db-user' and '-db-password'
func opendb() (db *sql.DB) {
	var err error
	db, err = sql.Open("postgres", "user=postgres password=test sslmode=disable port=32768")
	if err != nil {
		log.Fatal(err)
	}
	return
}

// Gets a single post by its id
func retrievePost(id int, db *sql.DB) (p *Post, err error) {
	err = db.QueryRow("SELECT id, title, createdat, content, author, description, comments, imageurl FROM posts where id = $1",
		id).Scan(&p.ID, &p.Title, &p.CreatedAt, &p.Author, &p.Description, &p.Content, &p.Comments, &p.ImageURL)
	return
}

// Create a new post
func (p *Post) Create(db *sql.DB) (err error) {
	statement := `insert into posts (title, createdat, content, author, description, imageurl)
		values ($1, $2, $3, $4, $5, $6) returning id`
	stmt, err := db.Prepare(statement)
	if err != nil {
		return err
	}
	defer stmt.Close()
	err = stmt.QueryRow(p.ID, p.Title, p.CreatedAt, p.Author, p.Description, p.Content, p.ImageURL).Scan(&p.ID)
	return err
}

// Get a list of all posts and their properties for the index.
func Posts() (ps []Post, err error) {
	db := opendb()
	if err != nil {
		return
	}
	defer db.Close()
	rows, err := db.Query("SELECT id, title, createdat, author, description FROM posts ORDER BY createdat DESC")
	if err != nil {
		return
	}
	for rows.Next() {
		p := Post{}
		if err = rows.Scan(&p.ID, &p.Title, &p.CreatedAt, &p.Author, &p.Description, &p.Content, &p.ImageURL); err != nil {
			return
		}
		ps = append(ps, p)
	}
	rows.Close()
	return ps, err
}

func samplePost() []Post {
	post := Post{
		Title:       "Test Title",
		CreatedAt:   time.Now(),
		Author:      "Billy Chappell",
		Description: "Test description.",
		Content:     "Test content! Hello world!",
		ImageURL:    "http://placehold.it/1024x768",
	}
	p := []Post{post}
	return p
}
